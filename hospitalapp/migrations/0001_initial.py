# Generated by Django 3.0.3 on 2020-02-25 16:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.BooleanField()),
                ('prior', models.SmallIntegerField(blank=True, null=True)),
                ('id_parent', models.SmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Code')),
                ('name_vi', models.CharField(blank=True, max_length=255, verbose_name='Name_vi')),
                ('name_en', models.CharField(blank=True, max_length=255, verbose_name='Name_en')),
                ('unit', models.CharField(blank=True, max_length=100, verbose_name='Unit')),
                ('min_value', models.FloatField(blank=True, null=True, verbose_name='Min_value')),
                ('max_value', models.FloatField(blank=True, null=True, verbose_name='Max_value')),
                ('string_value', models.CharField(blank=True, max_length=100, verbose_name='String value')),
                ('sort_order', models.PositiveSmallIntegerField(blank=True, default=1, verbose_name='Sort order')),
                ('type', models.BooleanField(blank=True, default=0, verbose_name='Type')),
                ('status', models.BooleanField(blank=True, default=0, verbose_name='Status')),
                ('is_number', models.BooleanField(blank=True, default=0, verbose_name='Is Number')),
                ('id_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hospitalapp.Categories', verbose_name='Parent category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 40 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=40, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(blank=True, max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='phone number')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='address')),
                ('about', models.CharField(blank=True, max_length=500, verbose_name='about')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('avatar', models.URLField(blank=True, max_length=1000, verbose_name='avatar')),
                ('gender', models.IntegerField(blank=True, choices=[(0, 'Nam'), (1, 'Ná»¯')], null=True, verbose_name='gender')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
